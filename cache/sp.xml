<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.1 (Build 792U)" ts="2018-05-24 13:29:44">
<Routine name="REST" type="INC" timestamp="64566,48400.509836"><![CDATA[
#include %occErrors
#include %ZEN.Utils
#define get(%name) $get(%request.Data(%name,1))
#define Debug $d(%request.Data("Debug"))
#define R(%property) %request.Content.##Expression(%property)
#define Public ((%request.GetCgiEnv("SERVER_PORT") = 80) || (%request.GetCgiEnv("SERVER_PORT") = 443))
#define Private '$$$Public
]]></Routine>


<Class name="SPAGHET.Category">
<Description>
Категория</Description>
<SqlTableName>Category</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64774,4639.068745</TimeChanged>
<TimeCreated>64773,62657.220459</TimeCreated>

<Property name="Name">
<Description>
Название</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="NameIndex">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.CategoryD</DataLocation>
<DefaultData>CategoryDefaultData</DefaultData>
<IdLocation>^SPAGHET.CategoryD</IdLocation>
<IndexLocation>^SPAGHET.CategoryI</IndexLocation>
<StreamLocation>^SPAGHET.CategoryS</StreamLocation>
<ExtentSize>5</ExtentSize>
<Data name="CategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>1</Selectivity>
<AverageFieldSize>14.6</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NameIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SPAGHET.Client">
<Description>
Клиент</Description>
<SqlTableName>Client</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64778,50127.194059</TimeChanged>
<TimeCreated>64773,55937.539939</TimeCreated>

<Property name="UserID">
<Description>
Пользователь</Description>
<Type>SPAGHET.User</Type>
<Required>1</Required>
</Property>

<Index name="UserIDIndex">
<Properties>UserID</Properties>
<Unique>1</Unique>
</Index>

<Property name="Rating">
<Description>
Рейтинг</Description>
<Type>%Integer</Type>
<Parameter name="MINVAL" value="0"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.ClientD</DataLocation>
<DefaultData>ClientDefaultData</DefaultData>
<IdLocation>^SPAGHET.ClientD</IdLocation>
<IndexLocation>^SPAGHET.ClientI</IndexLocation>
<StreamLocation>^SPAGHET.ClientS</StreamLocation>
<ExtentSize>6</ExtentSize>
<Data name="ClientDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>UserID</Value>
</Value>
<Value name="3">
<Value>Rating</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Rating">
<Selectivity>16.6667%</Selectivity>
<AverageFieldSize>8.67</AverageFieldSize>
</Property>
<Property name="UserID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="UserIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SPAGHET.Cook">
<Description>
Повар</Description>
<SqlTableName>Cook</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64778,50134.428271</TimeChanged>
<TimeCreated>64773,62141.155238</TimeCreated>

<Property name="UserID">
<Type>SPAGHET.User</Type>
<Required>1</Required>
</Property>

<Index name="UserIDIndex">
<Properties>UserID</Properties>
<Unique>1</Unique>
</Index>

<Property name="CookStatus">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="Latitude">
<Description>
Местоположение</Description>
<Type>%Double</Type>
<Required>1</Required>
</Property>

<Property name="Longitude">
<Type>%Double</Type>
<Required>1</Required>
</Property>

<Property name="Rating">
<Description>
Рейтинг</Description>
<Type>%Double</Type>
<Parameter name="MINVAL" value="0"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.CookD</DataLocation>
<DefaultData>CookDefaultData</DefaultData>
<IdLocation>^SPAGHET.CookD</IdLocation>
<IndexLocation>^SPAGHET.CookI</IndexLocation>
<StreamLocation>^SPAGHET.CookS</StreamLocation>
<ExtentSize>7</ExtentSize>
<Data name="CookDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>UserID</Value>
</Value>
<Value name="3">
<Value>CookStatusID</Value>
</Value>
<Value name="4">
<Value>Latitude</Value>
</Value>
<Value name="5">
<Value>Longitude</Value>
</Value>
<Value name="6">
<Value>Rating</Value>
</Value>
<Value name="7">
<Value>CookStatus</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.14</AverageFieldSize>
</Property>
<Property name="CookStatus">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="CookStatusID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Latitude">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>3.71</AverageFieldSize>
</Property>
<Property name="Longitude">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>3.71</AverageFieldSize>
</Property>
<Property name="Rating">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<Property name="UserID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.14</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="UserIDIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SPAGHET.Dish">
<Description>
Блюдо</Description>
<SqlTableName>Dish</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64778,50141.560619</TimeChanged>
<TimeCreated>64773,63175.684653</TimeCreated>

<Property name="Name">
<Description>
Название</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Description">
<Description>
Описание</Description>
<Type>%String</Type>
</Property>

<Property name="Price">
<Description>
Стоимость</Description>
<Type>%Double</Type>
<Required>1</Required>
</Property>

<Property name="SubcategoryID">
<Type>SPAGHET.Subcategory</Type>
<Required>1</Required>
</Property>

<Property name="CookID">
<Type>SPAGHET.Cook</Type>
<Required>1</Required>
</Property>

<Property name="TimeToCook">
<Description>
Время  готовки</Description>
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.DishD</DataLocation>
<DefaultData>DishDefaultData</DefaultData>
<IdLocation>^SPAGHET.DishD</IdLocation>
<IndexLocation>^SPAGHET.DishI</IndexLocation>
<StreamLocation>^SPAGHET.DishS</StreamLocation>
<ExtentSize>40</ExtentSize>
<Data name="DishDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>Price</Value>
</Value>
<Value name="5">
<Value>SubcategoryID</Value>
</Value>
<Value name="6">
<Value>CookID</Value>
</Value>
<Value name="7">
<Value>TimeToCook</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.78</AverageFieldSize>
</Property>
<Property name="CookID">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>1.13</AverageFieldSize>
</Property>
<Property name="Description">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>4.88</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>16.28</AverageFieldSize>
</Property>
<Property name="Price">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>3.85</AverageFieldSize>
</Property>
<Property name="SubcategoryID">
<Selectivity>11.1111%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="TimeToCook">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>8.88</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SPAGHET.FavoriteDishes">
<Super>%Persistent,%Populate</Super>
<TimeChanged>64774,3682.080456</TimeChanged>
<TimeCreated>64774,3681.874635</TimeCreated>

<Property name="Client">
<Type>SPAGHET.Client</Type>
</Property>

<Property name="Dish">
<Type>SPAGHET.Dish</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.FavoriteDishesD</DataLocation>
<DefaultData>FavoriteDishesDefaultData</DefaultData>
<IdLocation>^SPAGHET.FavoriteDishesD</IdLocation>
<IndexLocation>^SPAGHET.FavoriteDishesI</IndexLocation>
<StreamLocation>^SPAGHET.FavoriteDishesS</StreamLocation>
<Data name="FavoriteDishesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Client</Value>
</Value>
<Value name="3">
<Value>Dish</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SPAGHET.Order">
<Description>
Заказ</Description>
<SqlTableName>Order</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64774,63805.510018</TimeChanged>
<TimeCreated>64773,63796.554531</TimeCreated>

<Property name="DishID">
<Type>SPAGHET.Dish</Type>
</Property>

<Property name="ClientID">
<Type>SPAGHET.Client</Type>
</Property>

<Property name="OrderStatus">
<Description>
Создан или отменен</Description>
<Type>%Integer</Type>
</Property>

<Property name="TimeStart">
<Description>
Дата и время возникновения заказа</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="CookToClient">
<Description>
Оценка повара клиентом</Description>
<Type>%Integer</Type>
</Property>

<Property name="ClientToCook">
<Description>
Оценка клиента поваром</Description>
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.OrderD</DataLocation>
<DefaultData>OrderDefaultData</DefaultData>
<IdLocation>^SPAGHET.OrderD</IdLocation>
<IndexLocation>^SPAGHET.OrderI</IndexLocation>
<StreamLocation>^SPAGHET.OrderS</StreamLocation>
<ExtentSize>40</ExtentSize>
<Data name="OrderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DishID</Value>
</Value>
<Value name="3">
<Value>ClientID</Value>
</Value>
<Value name="4">
<Value>OrderStatusID</Value>
</Value>
<Value name="5">
<Value>TimeStart</Value>
</Value>
<Value name="6">
<Value>TimeUpdate</Value>
</Value>
<Value name="7">
<Value>CookToClient</Value>
</Value>
<Value name="8">
<Value>ClientToCook</Value>
</Value>
<Value name="9">
<Value>OrderStatus</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.78</AverageFieldSize>
</Property>
<Property name="ClientID">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>1.05</AverageFieldSize>
</Property>
<Property name="ClientToCook">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>8.88</AverageFieldSize>
</Property>
<Property name="CookToClient">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>8.93</AverageFieldSize>
</Property>
<Property name="DishID">
<Selectivity>7.1429%</Selectivity>
<AverageFieldSize>1.35</AverageFieldSize>
</Property>
<Property name="OrderStatusID">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="TimeStart">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<Property name="TimeUpdate">
<Selectivity>2.5000%</Selectivity>
<AverageFieldSize>19</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Package name="SPAGHET" sqlname="SPAGHET"/>


<Class name="SPAGHET.Subcategory">
<Description>
Подкатегория</Description>
<SqlTableName>Subcategory</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64774,4703.254761</TimeChanged>
<TimeCreated>64773,62777.593393</TimeCreated>

<Property name="Name">
<Description>
Название</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="NameIndex">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="CategoryID">
<Type>SPAGHET.Category</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.SubcategoryD</DataLocation>
<DefaultData>SubcategoryDefaultData</DefaultData>
<IdLocation>^SPAGHET.SubcategoryD</IdLocation>
<IndexLocation>^SPAGHET.SubcategoryI</IndexLocation>
<StreamLocation>^SPAGHET.SubcategoryS</StreamLocation>
<ExtentSize>15</ExtentSize>
<Data name="SubcategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>CategoryID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.4</AverageFieldSize>
</Property>
<Property name="CategoryID">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>1</Selectivity>
<AverageFieldSize>17.07</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="NameIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SPAGHET.User">
<Description>
Пользователь</Description>
<SqlTableName>User</SqlTableName>
<Super>%Persistent,%Populate</Super>
<TimeChanged>64778,45130.275989</TimeChanged>
<TimeCreated>64773,54127.080576</TimeCreated>

<Property name="Login">
<Description>
Логин</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Password">
<Description>
Пароль</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Name">
<Description>
Имя</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="RegistrationDate">
<Description>
Дата регистрации</Description>
<Type>%Date</Type>
<Required>1</Required>
</Property>

<Property name="PhoneNumber">
<Description>
Номер телефона</Description>
<Type>%String</Type>
</Property>

<Property name="Address">
<Description>
Адрес</Description>
<Type>%String</Type>
</Property>

<Property name="Email">
<Description>
Адрес электронной почты</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SPAGHET.UserD</DataLocation>
<DefaultData>UserDefaultData</DefaultData>
<IdLocation>^SPAGHET.UserD</IdLocation>
<IndexLocation>^SPAGHET.UserI</IndexLocation>
<StreamLocation>^SPAGHET.UserS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="UserDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Login</Value>
</Value>
<Value name="3">
<Value>Password</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>LastName</Value>
</Value>
<Value name="6">
<Value>RegistrationDate</Value>
</Value>
<Value name="7">
<Value>PhoneNumber</Value>
</Value>
<Value name="8">
<Value>Address</Value>
</Value>
<Value name="9">
<Value>Email</Value>
</Value>
<Value name="10">
<Value>Name</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="Address">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>4.9</AverageFieldSize>
</Property>
<Property name="Email">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="FirstName">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="LastName">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
</Property>
<Property name="Login">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>15.4</AverageFieldSize>
</Property>
<Property name="Password">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="PhoneNumber">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
</Property>
<Property name="RegistrationDate">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="Web.AbstractREST">
<IncludeCode>REST</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>64774,3951.754667</TimeChanged>
<TimeCreated>64774,3951.754667</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>1</Default>
</Parameter>

<Method name="DispatchRequest">
<Description><![CDATA[
Dispatch a REST request according to URL and Method.<br>
Add param Namespace to a request to execute MDX in desired namespace.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %response As %CSP.Response
	#dim %request As %CSP.Request
	#dim %session As %CSP.Session
	
	//Do %response.SetHeader("Access-Control-Allow-Origin",..GetOrigins())
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Credentials","true")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language, X-Requested-With") 
	
	Set %response.CharSet = "utf-8"
	Set %response.ContentType="application/json"

	Set %session.Language=$$MatchLanguage^%occMessages(%request.GetCgiEnv("HTTP_ACCEPT_LANGUAGE"),"%CSP","+s") // Localization support
	Set %response.Language=%session.Language
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
	    
	    Set st = ..ConvertRequestBody()
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
	    // Desired execusion namespace
	    Set Namespace = $get(%request.Data("Namespace",1))
	    Set st = ..CheckNamespace(.Namespace)
	    If $$$ISERR(st) Do ..Http500(st) Quit
	    
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        Set tAccess2=$SYSTEM.Security.Check($Piece($zu(90,21,Namespace),"^",4))
        If ((tAccess'["READ,WRITE") || (tAccess2'["READ,WRITE"))
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit

            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Validate input
                Set tBody = $List(tMapEntry,4) 
                Set tSC = ..ValidateRequest(pMethod,tBody)
                If $$$ISERR(tSC) Do ..Http500(tSC) Quit
                
                #; Dispatch                
                If (Namespace'=$Namespace) {
                    Set oldNS = $Namespace
                    zn Namespace
                    Set tSC=$classmethod(tClass,tTarget,tArgs...)
                    zn oldNS
                } Else {
                    Set tSC=$classmethod(tClass,tTarget,tArgs...)
                }
                If $$$ISERR(tSC) Do ..Http500(tSC)
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (ex) {
        
        #; Issue a '500'
        Do ..Http500(ex.AsStatus())
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="ValidateRequest">
<Description>
Validates incoming request body against Body Route attribute.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,pBody:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	
	return:(pMethod'="POST") $$$OK
	return:(pBody="") $$$OK
	return:'$d(%request.Content.%data(pBody)) $$$ERROR($$$PropertyRequired,pBody)
	return $$$OK
]]></Implementation>
</Method>

<Method name="ConvertRequestBody">
<Description>
Converts request into UTF8. Converts request into proxyObject. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %request As %CSP.Request
	#dim obj As %ZEN.proxyObject

	return:'$isobject(%request.Content) $$$OK //empty request body - nothing to do
	
	// Convert request body into UTF8 proxyObject
	set content = %request.Content.Read($$$MaxStringLength)
	set content = $ZCVT(content,"I","UTF8") 
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.obj,1)
	return:$$$ISERR(st) st
	return:'$IsObject(obj) $$$ERROR($$$ArgumentIsNotAnObject,"Body")
	
	set %request.Content = obj // obj here is a valid UTF8 proxyObject with required property
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetOrigins">
<Description>
Get Origin from %request object </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set url = %request.GetCgiEnv("HTTP_REFERER")
	return $p(url,"/",1,3) // get http(s)://origin.com:port
]]></Implementation>
</Method>

<Method name="Login">
<Description>
Called for a REST page in the event of a login being required</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>skipheader:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Do %response.SetHeader("Access-Control-Allow-Origin",..GetOrigins())
	Do %response.SetHeader("Access-Control-Allow-Origin","*")
	Do %response.SetHeader("Access-Control-Allow-Credentials","true")
	Do %response.SetHeader("Access-Control-Allow-Methods","GET, PUT, POST, DELETE, OPTIONS")
	Do %response.SetHeader("Access-Control-Max-Age","10000")
	Do %response.SetHeader("Access-Control-Allow-Headers","Content-Type, Authorization, Accept-Language, X-Requested-With")
	
	Set %response.CharSet = "utf-8"
	Set %response.ContentType="application/json"
	
	If (%request.GetCgiEnv("REQUEST_METHOD") = "OPTIONS"){
		Do %response.WriteHTTPHeader()
		Return $$$OK
	}
	
    Quit ##super(skipheader)
]]></Implementation>
</Method>

<Method name="Http500">
<Description><![CDATA[
Issue an '500' error and give some indication as to what occurred.<br>
<b>pStatus</b> - %status, not %Exception.AbstractException.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Exception.AbstractException</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // we are expecting status
    #; Set the response Http status
    Set %response.Status="500 Internal Server Error"
    
    #; Return a helpful error string
    Write "{""Error oops"":"_$$$ZENJSSTR($System.Status.GetErrorText(pStatus,%session.Language))_"}"
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckNamespace">
<Description><![CDATA[
Returns OK if namespace both exists and contains MDX2JSON package.<br>
<b>Namespace</b> - name of namespace. Sets namespace variable to current namespace if empty or missing.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Namespace:%String=$Namespace]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (Namespace = "") {
		set Namespace = $Namespace
		return $$$OK
	}
	
	return:('##class(%SYS.Namespace).Exists(Namespace)) $$$ERROR($$$NamespaceUnavailable,Namespace) 
	
	if Namespace'=$Namespace {
        set oldNS = $Namespace
        zn Namespace
        set exists = ##class(%Dictionary.CompiledClass).%ExistsId("MDX2JSON.Utils") 
        zn oldNS
        return:(exists=0) $$$ERROR($$$GeneralError, "MDX2JSON package is not mapped to " _ Namespace)		
	}
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="DispatchMap">
<Description>
This project creates the DispatchMethod used to dispatch the Url and Method to the associated target method</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>pIndex:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tStream As %Stream.TmpCharacter
    #dim tHandler As %XML.ImportHandler
    #dim tCompiledClass As %Dictionary.CompiledClass
    
    #dim tArgCount,tIndex,tI,tCounter As %Integer
    #dim tArgs,tChild,tClassName,tDispatch,tError,tMap,tMethod,tPattern,tPiece,tType,tUrl As %String
    
    Try {
        
        Set tClassName=%classname
        
        #; Don't run on base class
        If tClassName="MDX2JSON.AbstractREST" Quit
       
        #; Find named XDATA block
        If ##class(%Dictionary.CompiledXData).%ExistsId(tClassName_"||UrlMap") {
            
            Set tCompiledClass=##class(%Dictionary.CompiledClass).%OpenId(tClassName,,.tSC)
            If '$IsObject(tCompiledClass)||$$$ISERR(tSC) Quit
            
            Set tIndex = tCompiledClass.XDatas.FindObjectId(tClassName_"||UrlMap")
            If tIndex="" Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap") Quit
        
            #; Get XDATA as stream
            Set tStream = tCompiledClass.XDatas.GetAt(tIndex).Data
            Do tStream.Rewind()
            
            #; Create an XML import handler ( use the internal handler )
            Set tHandler=##class(%XML.ImportHandler).%New("CacheTemp",$$$IntHandler) 
        
            #; Create the Entity Resolver
            Set tResolver=##class(%XML.SAX.XDataEntityResolver).%New(tClassName)
        
            #; Parse the XML data in the specfied stream
            Set tSC=##Class(%XML.SAX.Parser).ParseStream(tStream,tHandler,tResolver,,,"Schema")
            If $$$ISERR(tSC) Quit       
        
            #; Copy tree because handler will delete it's copy when it goes out of scope
            Merge tMap=^CacheTemp(tHandler.Tree)
    
            If $Data(tMap("error"))||$Data(tMap("warning")) {
                
                Set tSC=$$$ERROR($$$InvalidDispatchMap)
                For tType="error","warning" {       
                    Set tIndex = "" For {
                        Set tIndex=$Order(tMap(tType,tIndex),1,tError) If tIndex="" Quit
                        Set tSC=$$$ADDSC(tSC,$$$ERROR($$$GeneralError,tError))
                    }
                }
                Quit
            }
            
            #; Walk the xml and generate the routing map
            Set tChild="",tCounter=0 For {
                Set tChild=$Order(tMap(1,"c",tChild)) If tChild="" Quit
                Set tPattern="",tArgCount=0,tUrl=tMap(tChild,"a","Url")
                For tI=2:1:$Length(tUrl,"/") {
                    Set tPiece=$Piece(tUrl,"/",tI)
                    If $Extract(tPiece)=":" {
                        Set tPattern=tPattern_"/([^/]+)"
                    } else {
                        Set tPattern=tPattern_"/"_tPiece
                    }
                }
               
                Set tCounter=$Increment(tCounter),tMethod=tMap(tChild,"a","Method"),tDispatch=tMap(tChild,"a","Call"),tBody=$g(tMap(tChild,"a","Body"))
                $$$GENERATE(" If pIndex="_tCounter_" Quit $ListBuild("""_tPattern_""","""_tMethod_""","""_tDispatch_""","""_tBody_""")")
            }
            $$$GENERATE(" Quit """"")
                
        } Else {
            
            #; The specified class must have an XDATA Block named UrlMap
            Set tSC=$$$ERROR($$$XDataBlockMissing,tClassName,"UrlMap")
        }
        
    } Catch (e) {
        Set tSC=e.AsStatus()
    }
    
    Quit tSC
]]></Implementation>
</Method>

<XData name="Schema">
<Description>
This is the Schema which defines the form of the dispatch map</Description>
<Internal>1</Internal>
<Data><![CDATA[
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" >

<xs:element name="Routes">
<xs:complexType>
<xs:sequence>
<xs:element name="Route" minOccurs="0" maxOccurs="unbounded">
<xs:complexType>
<xs:attribute name="Url"    type="string" use="required"/>
<xs:attribute name="Method" type="string" use="required"/>
<xs:attribute name="Call" type="call" use="required"/>
<xs:attribute name="Body" type="string" use="optional"/>
</xs:complexType>
</xs:element>
</xs:sequence>
</xs:complexType>
</xs:element>

<xs:simpleType name="call">
<xs:restriction base="xs:string">
<xs:pattern value="([%]?[a-zA-Z][a-zA-Z0-9]*(\.[a-zA-Z][a-zA-Z0-9]*)*:)?[%]?[a-zA-Z][a-zA-Z0-9]*"/>
</xs:restriction>
</xs:simpleType>

<xs:simpleType name="string">
<xs:restriction base="xs:string">
<xs:minLength value="1"/>
</xs:restriction>
</xs:simpleType>


</xs:schema>
]]></Data>
</XData>

<Method name="POtoStr">
<ClassMethod>1</ClassMethod>
<FormalSpec>config</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set str=""
		
	//Redirect IO to the current routine - makes use of the labels defined below
	use $io::("^"_$ZNAME)
	
	//Enable redirection
	do ##class(%Device).ReDirectIO(1)

	do config.%ToJSON()
	
    //Disable redirection
    do ##class(%Device).ReDirectIO(0)
    
    quit str	  

    //Labels that allow for IO redirection
    //Read Character - we don't care about reading
rchr(c)      quit
    //Read a string - we don't care about reading
rstr(sz,to)  quit
    //Write a character - call the output label
wchr(s)      do output($char(s))  quit
    //Write a form feed - call the output label
wff()        do output($char(12))  quit
    //Write a newline - call the output label
wnl()        do output($char(13,10))  quit
    //Write a string - call the output label
wstr(s)      do output(s)  quit
    //Write a tab - call the output label
wtab(s)      do output($char(9))  quit
    //Output label - this is where you would handle what you actually want to do.
    //  in our case, we want to write to myStream
output(s)    set str=str_s   quit
]]></Implementation>
</Method>
</Class>


<Class name="Web.Broker">
<Super>Web.AbstractREST</Super>
<TimeChanged>64786,28039.613771</TimeChanged>
<TimeCreated>64774,4086.87956</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<!-- Проверка работоспособности -->
<Route Url="/test" Method="GET" Call="Web.Utils:Test"/>

<!-- Авторизация клиента (м.б. поменяется) 
	 Метод реализован, но может другая логика у Тимофея будет -->
<Route Url="/auth/client" Method="GET" Call="Web.Utils:ClientAuth"/>

<!-- Авторизация повара (м.б. поменяется) 
	 Метод реализован, но может другая логика у Тимофея будет -->
<Route Url="/auth/cook" Method="GET" Call="Web.Utils:CookAuth"/>

<!-- Получение списка категорий с подкатегориями -->
<Route Url="/cat" Method="GET" Call="Web.Utils:GetCategories"/>

<!-- Поиск по фильтрам -->
<Route Url="/find" Method="GET" Call="Web.Utils:FindDishes"/>

<!-- Получить историю клиента -->
<Route Url="/history/get/client" Method="GET" Call="Web.Utils:GetClientHistory"/>

<!-- Получить историю повара
	 Метод не реализован -->
<Route Url="/history/get/cook" Method="GET" Call="Web.Utils:GetCookHistory"/>

<!-- Я боженька названий методов, это добавить элемент в историю клиента (сделать заказ крч)
	 -->
<Route Url="/history/set/client" Method="GET" Call="Web.Utils:SetClientHistory"/>

<!-- Аналогично, сделать заказ поваром
	 Метод не реализован -->
<Route Url="/history/set/cook" Method="GET" Call="Web.Utils:SetCookHistory"/>

<!-- Оценить блюдо клиентом -->
<Route Url="/history/assess/client" Method="GET" Call="Web.Utils:ClientAssessDish"/>

<!-- Оценить блюдо поваром
	 Метод не реализован -->
<Route Url="/history/assess/cook" Method="GET" Call="Web.Utils:CookAssessDish"/>

<!-- Добавить новое блюдо -->
<Route Url="/dishes/add" Method="GET" Call="Web.Utils:AddDish"/>

</Routes>
]]></Data>
</XData>
</Class>


<Class name="Web.Utils">
<Super>Web.AbstractREST</Super>
<TimeChanged>64792,46059.481672</TimeChanged>
<TimeCreated>64774,4016.647727</TimeCreated>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Test"
	return $$$OK
]]></Implementation>
</Method>

<Method name="ClientAuth">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s login = %request.Data("login", 1)
	s pass = %request.Data("pass", 1)
	
	s sql = "SELECT c.ID, u.Name" _
	" FROM SPAGHET.""User"" AS u" _
	" LEFT JOIN SPAGHET.Client AS c ON u.ID = c.UserID" _
	" WHERE Login = '" _login _"' AND Password = '" _ pass _ "'"
		
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="CookAuth">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s login = %request.Data("login", 1)
	s pass = %request.Data("pass", 1)
	
	s sql = "SELECT c.ID, u.Name" _
	" FROM SPAGHET.""User"" AS u" _
	" LEFT JOIN SPAGHET.Cook AS c ON u.ID = c.UserID" _
	" WHERE Login = '" _login _"' AND Password = '" _ pass _ "'"
	
		
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetCategories">
<Description>
Получить список категорий и подкатегорий</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s sql = "SELECT s.CategoryID, c.Name AS CatName, s.ID AS SubID, s.Name AS SubName " _
	"FROM SPAGHET.Subcategory AS s " _
	"LEFT JOIN SPAGHET.Category AS c ON c.ID = s.CategoryID " _
	"ORDER BY s.CategoryID"
		
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="FindDishes">
<Description>
Отправить список фильтров для поиска</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s subName = %request.Data("Sub", 1)
	s priceFrom = %request.Data("PriceFrom", 1)
	s priceTo = %request.Data("PriceTo", 1)
	s cookingTime = %request.Data("CookingTime", 1)
	s str = %request.Data("Str", 1)
	
	s sql = "SELECT d.ID AS ID, d.Name AS Title, d.Price AS Price, d.Description AS Description, " _
	"cat.Name AS Category, sub.Name AS Subcategory, " _
	"d.TimeToCook AS CookingTime, " _
	"u.Name AS CookName, c.Rating AS Rating, c.Latitude AS Lat, " _
	"c.Longitude AS Lng, u.PhoneNumber AS Phone " _
	"FROM SPAGHET.Dish AS d " _
	"LEFT JOIN SPAGHET.Cook AS c ON d.CookID = c.ID " _
	"LEFT JOIN SPAGHET.""User"" AS u ON c.UserID = u.ID " _
	"LEFT JOIN SPAGHET.Subcategory AS sub ON d.SubcategoryID = sub.ID " _
	"LEFT JOIN SPAGHET.Category AS cat ON cat.ID = sub.CategoryID " _
	"WHERE  c.CookStatus = 1 AND d.TimeToCook < " _ cookingTime _ 
	" AND Price > " _ priceFrom _ " AND Price < " _ priceTo _
	" AND Description LIKE '%" _ str _"%'" _
	" AND sub.Name = '" _ subName _ "'" _
	" ORDER BY CookingTime"
	
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="AddDish">
<Description>
Добавить новое блюдо</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	s userID = %request.Data("UserID", 1)
	s name = %request.Data("Name", 1)
	s subcat = %request.Data("Sub", 1)
	s price = %request.Data("Price", 1)
	s desc = %request.Data("Description", 1)
	s cookingTime = %request.Data("CookingTime", 1)
	
	s dish = ##class(SPAGHET.Dish).%New()
	s dish.CookID = ##class(SPAGHET.Client).%OpenId(userID)
	s dish.Name = name
	s dish.Price = price
	s dish.Description = desc
	s dish.TimeToCook = cookingTime
	
	s subID = 0

	&sql(DECLARE curEm CURSOR FOR SELECT sub.ID FROM SPAGHET.Subcategory AS sub
	WHERE sub.Name = :subcat)
	&sql(OPEN curEm)
	for
	{
 		&sql(FETCH curEm into :subID) quit:(SQLCODE '= 0)
 	}
 	
 	s dish.SubcategoryID = ##class(SPAGHET.Subcategory).%OpenId(subID)

	$$$ThrowOnError(dish.%Save())
	
	w {"Status":"1"}.%ToJSON()
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetClientHistory">
<Description>
Получить историю клиента</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s ID = %request.Data("ID", 1)
	
	s sql = "SELECT o.ID, o.ClientID, o.ClientToCook, d.Description, d.Name AS DishName, TimeStart, u.PhoneNumber, u.Name AS CookName" _
	" FROM SPAGHET.Order AS o" _
	" LEFT JOIN SPAGHET.Dish AS d ON o.DishID = d.ID" _
	" LEFT JOIN SPAGHET.Cook AS c ON c.ID = d.CookID" _
	" LEFT JOIN SPAGHET.""User"" AS u ON c.UserID = u.ID" _
	" WHERE o.ClientID = " _ID_
	" ORDER BY o.ClientToCook"
	
	d ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql,,$$$MaxCacheInt)
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="SetClientHistory">
<Description>
Добавить заказ клиента</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s dishID = %request.Data("DishID", 1)
	s userID = %request.Data("UserID", 1)
	
	s order = ##class(SPAGHET.Order).%New()
	s order.ClientID = ##class(SPAGHET.Client).%OpenId(userID)
	s order.DishID = ##class(SPAGHET.Dish).%OpenId(dishID)
	s order.OrderStatus = 1
	s order.ClientToCook = 0
	s order.CookToClient = 0
	s order.TimeStart = $zdt($ztimestamp,3)	
	
	$$$ThrowOnError(order.%Save())
	
	w {"Status":"1"}.%ToJSON()
	
	return $$$OK
]]></Implementation>
</Method>

<Method name="ClientAssessDish">
<Description>
Оценить заказ клиента</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s orderID = %request.Data("ID", 1)
	s mark = %request.Data("Mark", 1)	
	s order = ##class(SPAGHET.Order).%OpenId(orderID)	
	s order.ClientToCook = mark
	$$$ThrowOnError(order.%Save())
	
	w {"Status":"1"}.%ToJSON()
	
	return $$$OK
]]></Implementation>
</Method>
</Class>


<Project name="sp" LastModified="2018-05-11 05:32:38.012879">
  <Items>
    <ProjectItem name="REST.INC" type="MAC"></ProjectItem>
    <ProjectItem name="SPAGHET" type="PKG"></ProjectItem>
    <ProjectItem name="Web.AbstractREST" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Broker" type="CLS"></ProjectItem>
    <ProjectItem name="Web.Utils" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
